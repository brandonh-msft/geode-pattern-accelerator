# https://aka.ms/yaml

pr: none
trigger:
  batch: true
  branches:
    include:
      - develop
  paths:
    include:
      - terraform/
      - api/azurefunction

variables:
  - name: terraformVersion
    value: "0.13.5"  
pool:
  vmImage: "ubuntu-latest"

stages:
  - stage: Plan
    displayName: Terraform Plan
    jobs:
      - job:
        steps:
          - bash: |
              cp -v terraform/terraform_backend/* terraform
            displayName: Copy terraform backend config to terraform directory
            workingDirectory: $(System.DefaultWorkingDirectory)
          - task: TerraformInstaller@0
            displayName: "Install Terraform $(terraformVersion)"
            inputs:
              terraformVersion: "$(terraformVersion)"
          - task: TerraformCLI@0
            displayName: tf init
            inputs:
              command: "init"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              backendType: "azurerm"
              backendServiceArm: "$(SERVICECONNECTION)"
              backendAzureRmResourceGroupName: "$(TFSTATESTORAGEACCOUNTRESOURCEGROUPNAME)"
              backendAzureRmStorageAccountName: "$(TFSTATESTORAGEACCOUNTNAME)"
              backendAzureRmContainerName: "tfstate"
              backendAzureRmKey: "$(BASENAME).tfstate"
          - task: AzureCLI@1
            displayName: Get ARM credentials for Terraform
            inputs:
              azureSubscription: "$(SERVICECONNECTION)"
              scriptLocation: inlineScript
              inlineScript: |
                set -eu
                subscriptionId=$(az account show --query id -o tsv)
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$servicePrincipalKey"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
                #echo "##vso[task.setvariable variable=TF_LOG]DEBUG"
              addSpnToEnvironment: true
          - task: TerraformCLI@0
            displayName: "tf plan"
            inputs:
              command: "plan"
              workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
              commandOptions: '-compact-warnings -var "baseName=$(BASENAME)" -var "primaryLocation=$(PRIMARYLOCATION)" -var "additionalLocations=$(ADDITIONALLOCATIONS)" -var "apiType=AzureFunction" -var "databaseMaxThroughput=$(DATABASEMAXTHROUGHPUT)" -var "containerMaxThroughput=$(CONTAINERMAXTHROUGHPUT)" -var "availabilityZones=$(AVAILABILITYZONES)" -var "multiRegionWrite=$(MULTIREGIONWRITE)" -var "consistencyLevel=$(CONSISTENCYLEVEL)" -var "appServicePlanTier=$(APPSERVICEPLANTIER)" -var "appServicePlanSize=$(APPSERVICEPLANSIZE)"'
              backendType: azurerm
              environmentServiceName: $(SERVICECONNECTION)
  - stage: Deploy
    displayName: Terraform Deploy
    dependsOn: Plan
    jobs:
      - deployment: TerraformDeploy
        environment: ReceiverProduction
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - bash: |
                    az config set extension.use_dynamic_install=yes_without_prompt
                    az extension add -n application-insights
                  displayName: Install App Insights extension for az cli
                - bash: |
                    cp terraform/terraform_backend/* terraform
                  displayName: Copy terraform backend config to terraform directory
                  workingDirectory: $(System.DefaultWorkingDirectory)
                - task: TerraformInstaller@0
                  displayName: "Install Terraform $(terraformVersion)"
                  inputs:
                    terraformVersion: "$(terraformVersion)"
                - task: TerraformCLI@0
                  displayName: tf init
                  inputs:
                    command: "init"
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
                    backendType: "azurerm"
                    backendServiceArm: "$(SERVICECONNECTION)"
                    backendAzureRmResourceGroupName: "$(TFSTATESTORAGEACCOUNTRESOURCEGROUPNAME)"
                    backendAzureRmStorageAccountName: "$(TFSTATESTORAGEACCOUNTNAME)"
                    backendAzureRmContainerName: "tfstate"
                    backendAzureRmKey: "$(BASENAME).tfstate"
                - task: AzureCLI@1
                  displayName: Get ARM credentials for Terraform
                  inputs:
                    azureSubscription: "$(SERVICECONNECTION)"
                    scriptLocation: inlineScript
                    inlineScript: |
                      set -eu
                      subscriptionId=$(az account show --query id -o tsv)
                      echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId"
                      echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true]$servicePrincipalKey"
                      echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscriptionId"
                      echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
                    addSpnToEnvironment: true
                - task: TerraformCLI@0
                  displayName: "tf validate & apply"
                  inputs:
                    command: "apply"
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
                    commandOptions: '-compact-warnings -var "baseName=$(BASENAME)" -var "primaryLocation=$(PRIMARYLOCATION)" -var "additionalLocations=$(ADDITIONALLOCATIONS)" -var "apiType=AzureFunction" -var "databaseMaxThroughput=$(DATABASEMAXTHROUGHPUT)" -var "containerMaxThroughput=$(CONTAINERMAXTHROUGHPUT)" -var "availabilityZones=$(AVAILABILITYZONES)" -var "multiRegionWrite=$(MULTIREGIONWRITE)" -var "consistencyLevel=$(CONSISTENCYLEVEL)" -var "appServicePlanTier=$(APPSERVICEPLANTIER)" -var "appServicePlanSize=$(APPSERVICEPLANSIZE)"'
                    backendType: azurerm
                    environmentServiceName: $(SERVICECONNECTION)
                    runAzLogin: true
                - task: Bash@3
                  name: TerraformOutputs
                  displayName: Save Terraform Outputs
                  inputs:
                    targetType: "inline"
                    script: |
                      set -eu
                      mkdir $(Build.ArtifactStagingDirectory)/terraform
                      terraform output -json | echo "$(jq 'map(.value)')" > $(Build.ArtifactStagingDirectory)/terraform/outputs.json
                      cp -r app_settings $(Build.ArtifactStagingDirectory)/terraform
                    workingDirectory: "$(System.DefaultWorkingDirectory)/terraform"
                - task: PublishPipelineArtifact@1
                  inputs:
                    targetPath: "$(Build.ArtifactStagingDirectory)/terraform"
                    artifact: "terraform"
                    publishLocation: "pipeline"
      - job: BuildDotNetFunctionCode
        dependsOn: []
        variables:
          - name: BuildConfiguration
            value: Release
          - name: OutputDir
            value: $(Build.ArtifactStagingDirectory)/azurefunction
        steps:
          - task: UseDotNet@2
            displayName: "Use .NET Core sdk 3.1"
            inputs:
              packageType: sdk
              version: 3.1.x
          - bash: |
              dotnet publish -c $(BuildConfiguration) -p:PublishDir=$(OutputDir) api/azurefunction/azurefunction/*.csproj
            displayName: dotnet build function app
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/azurefunction"
              artifact: "azurefunction"
              publishLocation: "pipeline"
      - job: DotnetFunctionAppDeployment
        dependsOn:
          - TerraformDeploy
          - BuildDotNetFunctionCode
        steps:
          - bash: |
              wget -q https://packages.microsoft.com/config/ubuntu/16.04/packages-microsoft-prod.deb
              sudo dpkg -i packages-microsoft-prod.deb
              sudo apt-get update
              sudo apt-get install azure-functions-core-tools-3
            displayName: Install Azure Functions Core Tools v3
          - task: DownloadPipelineArtifact@2
            displayName: "Get terraform output"
            inputs:
              buildType: "current"
              artifactName: "terraform"
              targetPath: "$(Pipeline.Workspace)/terraform_output"
          - task: DownloadPipelineArtifact@2
            displayName: "Get dotnet function artifact"
            inputs:
              buildType: "current"
              artifactName: "azurefunction"
              targetPath: "$(Pipeline.Workspace)/azurefunction"
          - task: AzureCLI@1
            name: PublishDotnetFunctions
            displayName: Publish functions and seed database
            inputs:
              azureSubscription: "$(SERVICECONNECTION)"
              scriptLocation: "scriptPath"
              scriptPath: "$(System.DefaultWorkingDirectory)/pipelines/deploy_geode_function_api/publishapps.sh"
              arguments: "$(Pipeline.Workspace)/terraform_output outputs.json"
              addSpnToEnvironment: true
              workingDirectory: $(Pipeline.Workspace)/azurefunction
          